{"slots":{"0":{"name":"Container","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"containerContentUpdate()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"0"},"key":"0"},{"code":"---\n--- Created by Zrips#9691.\n--- DateTime: 2022-10-14 11:33\n---\n---\n\nlocal Localize = false --export: When enabled we will localize schematic names\n\nfunction schematicsTracker()\n\n    -- Keep ID as it is which if first number\n    -- Second number defines amount you want to have\n    -- Third value is optional, set it to true if you want it to be prioritized, set it to false for low priority\n    -- keeping last value empty will make schematic normal priority\n\n    setTier(1)\n\n    -- Tier 1 Product Material\n    addSchematic(690638651, 6000, true)\n    -- Tier 1 XS Element\n    addSchematic(1910482623, 50)\n    -- Tier 1 S Element\n    addSchematic(4148773283, 50)\n    -- Tier 1 M Element\n    addSchematic(2066101218, 50, true)\n    -- Tier 1 L Element\n    addSchematic(2068774589, 100, true)\n    -- Tier 1 XL Element\n    addSchematic(304578197, 50)\n    -- Tier 1 Honeycomb\n    addSchematic(2479827059, 500, false)\n\n    setTier(2)\n\n    -- Tier 2 Product Material\n    addSchematic(4073976374, 4000, true)\n    -- Tier 2 Pure Material\n    addSchematic(3332597852, 4000, true)\n    -- Tier 2 XS Element\n    addSchematic(2096799848, 40)\n    -- Tier 2 S Element\n    addSchematic(1752968727, 40)\n    -- Tier 2 M Element\n    addSchematic(2726927301, 40, true)\n    -- Tier 2 L Element\n    addSchematic(616601802, 60, true)\n    -- Tier 2 XL Element\n    addSchematic(3677281424, 40)\n    -- Tier 2 Honeycomb\n    addSchematic(632722426, 500, false)\n    -- Tier 2 Honeycomb\n    addSchematic(625377458, 500, false)\n\n    setTier(3)\n\n    -- Tier 3 Product Material\n    addSchematic(3707339625, 1000, true)\n    -- Tier 3 Pure Material\n    addSchematic(2003602752, 1000, true)\n    -- Tier 3 XS Element\n    addSchematic(787727253, 30)\n    -- Tier 3 S Element\n    addSchematic(425872842, 30)\n    -- Tier 3 M Element\n    addSchematic(3713463144, 30, true)\n    -- Tier 3 L Element\n    addSchematic(1427639881, 30, true)\n    -- Tier 3 XL Element\n    addSchematic(109515712, 30)\n    -- Tier 3 Honeycomb\n    addSchematic(2343247971, 500, false)\n    -- Tier 3 Honeycomb\n    addSchematic(4221430495, 500, false)\n\n    setTier(6)\n\n    -- Construct Support XS\n    addSchematic(1477134528, 100)\n    -- Construct Support S\n    addSchematic(1224468838, 100)\n    -- Construct Support M\n    addSchematic(1861676811, 200, true)\n    -- Construct Support L\n    addSchematic(784932973, 200, true)\n\n    moveToSecondScreen()\n    setTier(4)\n\n    -- Tier 4 Product Material\n    addSchematic(2485530515, 500)\n    -- Tier 4 Pure Material\n    addSchematic(2326433413, 500)\n    -- Tier 4 XS Element\n    addSchematic(210052275, 30)\n    -- Tier 4 S Element\n    addSchematic(3890840920, 30)\n    -- Tier 4 M Element\n    addSchematic(3881438643, 30)\n    -- Tier 4 L Element\n    addSchematic(1614573474, 30)\n    -- Tier 4 XL Element\n    addSchematic(1974208697, 30)\n    -- Tier 4 Honeycomb\n    addSchematic(3743434922, 500, false)\n    -- Tier 4 Honeycomb\n    addSchematic(99491659, 500, false)\n\n    setTier(5)\n\n    -- Tier 5 Product Material\n    addSchematic(2752973532, 500)\n    -- Tier 5 Pure Material\n    addSchematic(1681671893, 500)\n    -- Tier 5 XS Element\n    addSchematic(1513927457, 30)\n    -- Tier 5 S Element\n    addSchematic(880043901, 30)\n    -- Tier 5 M Element\n    addSchematic(3672319913, 30)\n    -- Tier 5 L Element\n    addSchematic(86717297, 30)\n    -- Tier 5 XL Element\n    addSchematic(1320378000, 30)\n    -- Tier 5 Honeycomb\n    addSchematic(1885016266, 500, false)\n    -- Tier 5 Honeycomb\n    addSchematic(3303272691, 500, false)\n\n    setTier(7)\n\n    -- Core Unit xs\n    addSchematic(120427296, 10)\n    -- Core Unit s\n    addSchematic(1213081642, 10)\n    -- Core Unit M\n    addSchematic(1417495315, 20)\n    -- Core Unit L\n    addSchematic(1202149588, 20)\n\n    setTier(8)\n\n    -- Warp cells\n    addSchematic(363077945, 5000, true)\n    -- Atmo Fuel\n    addSchematic(3077761447, 5000)\n    -- Space Fuel\n    addSchematic(1917988879, 5000)\n    -- Rocket Fuel\n    addSchematic(3992802706, 2000, false)\nend\n\nschematicsTracker()\n\nunit.hideWidget()\n\nfunction updateScreens()\n\n    local SerializedContentsLeft = serialize(contentsLeft)\n    local SerializedContentsRight = serialize(contentsRight)\n\n    for id, screenObject in ipairs(screens) do\n        local script = \"\"\n        if screenObject.second then\n            script = formatScript(SerializedContentsRight)\n        else\n            script = formatScript(SerializedContentsLeft)\n        end\n        screenObject.screen.setRenderScript(script)\n    end\nend\n\nfunction generateItemUpdate()\n    local map = container.getContent()\n    tempInfo = {}\n    for _, i in ipairs(map) do\n        local schem = getExistingSchematic(i.id)\n        if schem ~= nil then\n            local item = system.getItem(i.id)\n            local existingId, existingItem = getExisting(item.id)\n            if existingItem == nil then\n                tempInfo[#tempInfo + 1] = { id = item.id, name = item.displayName:gsub(\"Schematic Copy\", \"\"), volume = mfloor(i.quantity), max = schem.max, tier = item.tier, p = schem.priority }\n            else\n                existingItem.volume = mfloor(existingItem.volume + i.quantity)\n                tempInfo[existingId] = existingItem\n            end\n        end\n    end\n    return tempInfo\nend\n\nfunction getExisting(id)\n    for i, item in ipairs(tempInfo) do\n        if item.id == id then\n            return i, item\n        end\n    end\n    return -1, nil\nend\n\nfunction getExistingSchematic(id)\n    for i, item in ipairs(schematics) do\n        if item.id == id then\n            return item\n        end\n    end\n    return nil\nend\n\nfunction fillMissing()\n    infoLeft = {}\n    infoRight = {}\n    for id, schematic in ipairs(schematics) do\n        local id, existing = getExisting(schematic.id)\n        if schematic.left then\n            if not existing then\n                infoLeft[#infoLeft + 1] = { name = schematic.name, volume = 0, max = schematic.max, tier = schematic.tier, p = schematic.priority }\n            else\n                infoLeft[#infoLeft + 1] = { name = schematic.name, volume = existing.volume, max = schematic.max, tier = schematic.tier, p = schematic.priority }\n            end\n        else\n            if not existing then\n                infoRight[#infoRight + 1] = { name = schematic.name, volume = 0, max = schematic.max, tier = schematic.tier, p = schematic.priority }\n            else\n                infoRight[#infoRight + 1] = { name = schematic.name, volume = existing.volume, max = schematic.max, tier = schematic.tier, p = schematic.priority }\n            end\n        end\n    end\n    return infoLeft, infoRight\nend\n\nfunction containerContentUpdate()\n    lastRequest = system.getArkTime()\n    requestingUpdateContent = false\n    generateItemUpdate()\n    contentsLeft, contentsRight = fillMissing()\n    updateScreens()\nend\n\nlocal init = false\n\nfunction update()\n    requestingUpdateContent = true\n    container.updateContent()\n\n    if not init then\n        local map = container.getContent()\n        if map and #map > 0 then\n            generateItemUpdate()\n            contentsLeft, contentsRight = fillMissing()\n            updateScreens()\n        end\n        init = true\n    end\nend\n\nupdate()\n\nunit.setTimer('update', 1)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"1"},{"code":"update()","filter":{"args":[{"value":"update"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"---\n--- Created by Zrips.\n--- DateTime: 2022-10-06 11:03\n---\n\nmceil = math.ceil\nsmatch = string.match\nssub = string.sub\n\nlocal concat = table.concat\nlocal function internalSerialize(table, tC, t)\n    t[tC] = \"{\"\n    tC = tC + 1\n    if #table == 0 then\n        local hasValue = false\n        for key, value in pairs(table) do\n            hasValue = true\n            local keyType = type(key)\n            if keyType == \"string\" then\n                t[tC] = key .. \"=\"\n            elseif keyType == \"number\" then\n                t[tC] = \"[\" .. key .. \"]=\"\n            elseif keyType == \"boolean\" then\n                t[tC] = \"[\" .. tostring(key) .. \"]=\"\n            else\n                t[tC] = \"notsupported=\"\n            end\n            tC = tC + 1\n\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        if hasValue then\n            tC = tC - 1\n        end\n    else\n        for i = 1, #table do\n            local value = table[i]\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        tC = tC - 1\n    end\n    t[tC] = \"}\"\n    return tC\nend\n\nfunction serialize(value)\n    local t = {}\n    local check = type(value)\n\n    if check == \"table\" then\n        internalSerialize(value, 1, t)\n    elseif check == \"string\" then\n        return '\"' .. value .. '\"'\n    elseif check == \"number\" then\n        return value\n    elseif check == \"boolean\" then\n        return tostring(value)\n    else\n        return '\"Not Supported\"'\n    end\n\n    return concat(t)\nend\n\nfunction deserialize(s)\n    return load(\"return \" .. s)()\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"3"},{"code":"---\n--- Generated by EmmyLua(https://github.com/EmmyLua)\n--- Created by Zrips.\n---\n\n\nscreens = {}\ncontainer = nil\nrequestingUpdateContent = false\n\nmfloor = math.floor\n\nfor key, value in pairs(unit) do\n    if type(value) == \"table\" and type(value.export) == \"table\" then\n        if value.getClass then\n            if value.getClass() == \"ScreenUnit\" then\n                screens[#screens + 1] = { screen = value, slot = key, second = string.match(value.getName():lower(), \"screen_2\") ~= nil }\n            elseif value.getClass() == \"CoreUnitStatic\" or value.getClass() == \"CoreUnitSpace\" or value.getClass() == \"CoreUnitDynamic\" then\n                core = value\n            elseif string.match(value.getClass():lower(), \"container\") then\n                container = value\n            end\n        end\n    end\nend\n\n\nif not container then\n    system.print(\"Container NOT found\")\nend\n\nschematics = {}\n\ntempTier = 0\nleft = true\n\nfunction setTier(tier)\n    tempTier = tier\nend\n\nfunction moveToSecondScreen()\n    left = false\nend\n\nfunction addSchematic(id, max, priority)\n    local item = system.getItem(id)\n\n    local name = Localize and item.locDisplayName or item.displayName\n\n    -- English cleanup\n    name = name:gsub(\"Schematic Copy\", \"\")\n    name = name:gsub(\"Tier \" .. tempTier, \"\")\n    name = name:gsub(\"Construct Support\", \"\")\n    name = name:gsub(\"Core Unit\", \"\")\n\n    --German cleanup\n    name = name:gsub(\"Stufe\", \"\")\n    name = name:gsub(\"-\", \" \")\n    name = name:gsub(\"Schema\", \"\")\n\n    -- French cleanup\n    name = name:gsub(\"Copie de schéma \", \"\")\n    name = name:gsub(\"de soutien de construct\", \"\")\n    name = name:gsub(\"d'unités centrales\", \"\")\n    name = name:gsub(\"(de palier)\", \"\")\n    name = name:gsub(\"\" .. tempTier, \"\")\n\n    schematics[#schematics + 1] = { id = id, name = name, max = max, tier = tempTier, priority = priority, left = left }\nend\n\nfunction formatScript(data)\n    return [[---\n--- Created by Zrips#9691.\n--- DateTime: 2022-10-05 15:12\n---\n\nfont = loadFont('Play', 25)\nsmallFont = loadFont('Play', 15)\nmidFont = loadFont('Play', 20)\n\nif not init then\n    init = true\n\n    lastUpdate = getTime()\n\n    mfloor = math.floor\n    mceil = math.ceil\n\n    greyColor = { r = 128 / 255, g = 128 / 255, b = 128 / 255 }\n    cyanColor = { r = 135 / 255, g = 206 / 255, b = 235 / 255 }\n    uiSettings = { r = 37 / 255, g = 57 / 255, b = 64 / 255 }\n    barColor1 = { r = 255 / 255, g = 255 / 255, b = 255 / 255 }\n    orangeColor = { r = 224 / 255, g = 165 / 255, b = 85 / 255 }\n    backgroundColor = { r = 13 / 255, g = 24 / 255, b = 28 / 255 }\n\n    barColorGood = { r = 4 / 255, g = 159 / 255, b = 0 / 255 }\n    barColorBad = { r = 177 / 255, g = 80 / 255, b = 0 / 255 }\n\n    realX, realY = getResolution()\n    -- Inverting\n    ry, rx = realX, realY\n\n    barStartY = 40\n\n    barHeight = 25\n    barWidth = 130\n    barSpacing = 4\n\n    barInset = 2\n\n    sectionSpacing = 20\n\n    textBarSpacing = 10\n\n    blocks = ]] .. data .. [[\n    function round(number, decimals)\n        local power = 10 ^ decimals\n        return mfloor(number * power) / power\n    end\n\n    function mixColors(color1, color2, percent)\n        local inverse_percent = 1 - percent\n        local redPart = color2.r * percent + color1.r * inverse_percent\n        local greenPart = color2.g * percent + color1.g * inverse_percent\n        local bluePart = color2.b * percent + color1.b * inverse_percent\n        return { r = redPart, g = greenPart, b = bluePart };\n    end\n\n    function round(number, decimals)\n        local power = 10 ^ decimals\n        return mceil(number * power) / power\n    end\nend\n\nlocal layer = createLayer()\nsetLayerOrigin(layer, realX / 2, realY / 2)\nsetLayerTranslation(layer, (realX - realY) / 2, realY / 3)\nsetLayerRotation(layer, 1.5708)\nsetBackgroundColor(backgroundColor.r, backgroundColor.g, backgroundColor.b)\n\nlocal pos = 0\nlocal localPos = 1\n\n\nfunction getColor(material, progress)\n    if material.p then\n        if progress < 100 and material.max > 0 then\n            return orangeColor\n        end\n        return barColor1\n    elseif material.p == nil and progress < 100 and material.max > 0 then\n        return barColor1\n    end\n    return greyColor\nend\n\n\nfunction drawLine(material, y)\n\n    local alpha = 0.8\n    if localPos % 2 == 0 then\n        alpha = 0.1\n    end\n\n    setNextFillColor(layer, uiSettings.r, uiSettings.g, uiSettings.b, alpha)\n    setNextStrokeColor(layer, 0, 0, 0, 0)\n    setNextStrokeWidth(layer, 0)\n    addBox(layer, textBarSpacing * 2, y, rx - (textBarSpacing * 4), barHeight)\n\n    local progress = 0\n    if material.max > 0 then\n        progress = mfloor(material.volume * 100 / material.max)\n    end\n\n    if progress > 100 then\n        progress = 100\n    end\n\n    local width = progress * barWidth / 100\n\n    setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n    local textX = (textBarSpacing * 2)\n    local barX = rx - (textBarSpacing * 2) - barWidth\n    local secBarX = barX + 2\n    local volumeX = barX - textBarSpacing\n    local percentX = barX + (barWidth / 2)\n\n    alpha = 1\n\n    -- Material name section\n\n    local priorityColor = getColor(material, progress)\n    setNextFillColor(layer, priorityColor.r, priorityColor.g, priorityColor.b, 1)\n\n    addText(layer, midFont, material.name, textX, y + (barHeight / 2))\n\n    -- Bar background section\n    setNextFillColor(layer, uiSettings.r, uiSettings.g, uiSettings.b, alpha)\n    setNextStrokeColor(layer, cyanColor.r, cyanColor.g, cyanColor.b, alpha)\n    setNextStrokeWidth(layer, 0.01)\n    addBox(layer, barX, y, barWidth, barHeight)\n\n    if progress > 0 then\n        -- Dynamic bar section\n        local fillColor = mixColors(barColorBad, barColorGood, progress / 100)\n        setNextFillColor(layer, fillColor.r, fillColor.g, fillColor.b, 1)\n        setNextStrokeColor(layer, 0, 0, 0, 0)\n        addBox(layer, secBarX, y + barInset, width - (barInset * 2), barHeight - (barInset * 2))\n    end\n\n    -- Percentage section\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    setNextStrokeColor(layer, 0.1, 0.1, 0.1, 0.8)\n    setNextStrokeWidth(layer, alpha)\n    setNextFillColor(layer, barColor1.r, barColor1.g, barColor1.b, 1)\n    addText(layer, smallFont, progress .. \"%\", percentX, y + (barHeight / 2))\n\n\n    -- Volume section\n    setNextFillColor(layer, priorityColor.r, priorityColor.g, priorityColor.b, 1)\n\n    setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\n    setNextStrokeColor(layer, 0.1, 0.1, 0.1, 0.8)\n    setNextStrokeWidth(layer, 0.5)\n    addText(layer, smallFont, mfloor(material.volume) .. \" / \" .. mfloor(material.max), volumeX, y + (barHeight / 2))\nend\n\nlocal offset = 0\nlocal prevTier = 0\n\nlocal sectionStartY = 0\n\nfunction drawBorder()\n\n    setNextFillColor(layer, 0, 0, 0, 0)\n    setNextStrokeColor(layer, cyanColor.r, cyanColor.g, cyanColor.b, 0.5)\n    setNextStrokeWidth(layer, 0.01)\n    addBox(layer, barSpacing * 4, sectionStartY - barHeight, rx - (barSpacing * 8), barStartY + (pos * (barHeight + barSpacing)) + offset - sectionStartY - (barSpacing * 2))\n\nend\n\nfor id, schematic in ipairs(blocks) do\n\n    if prevTier ~= schematic.tier then\n        offset = offset + (barSpacing * 1.8) + barHeight\n        prevTier = schematic.tier\n        localPos = 1\n\n        if sectionStartY > 0 then\n            drawBorder()\n        end\n\n        sectionStartY = barStartY + (pos * (barHeight + barSpacing)) + offset\n\n        local tierName = \"Tier \" .. schematic.tier\n\n        if schematic.tier > 5 then\n            if schematic.tier == 6 then\n                tierName = \"Construct Support\"\n            elseif schematic.tier == 7 then\n                tierName = \"Core Unit\"\n            elseif schematic.tier == 8 then\n                tierName = \"Consumables\"\n            end\n        end\n\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n        setNextFillColor(layer, barColor1.r, barColor1.g, barColor1.b, 1)\n        addText(layer, font, tierName, rx / 2, barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\n\n    end\n\n    drawLine(schematic, barStartY + (pos * (barHeight + barSpacing)) + offset)\n    pos = pos + 1\n    localPos = localPos + 1\nend\n\noffset = offset + (barSpacing * 1.8) + barHeight\ndrawBorder()\n\nsetNextFillColor(layer, barColor1.r, barColor1.g, barColor1.b, 0)\nsetNextStrokeColor(layer, cyanColor.r, cyanColor.g, cyanColor.b, 1)\nsetNextStrokeWidth(layer, 0.1)\naddBox(layer, 10, 10, rx - 20, ry - 20)\n\nif lastUpdate + 30 > getTime() then\n    setNextFillColor(layer, 1, 1, 1, 0.5)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    addText(layer, midFont, mfloor(30 - (getTime() - lastUpdate)) .. \"s\", 35, 30)\nend\n\nsetNextFillColor(layer, 1, 1, 1, 0.5)\nsetNextTextAlign(layer, AlignH_Center, AlignV_Middle)\naddText(layer, font, \"Schematics Bank\", rx / 2, 30)\n\nfunction priority(x, y, text, color, alpha)\n\n    local boxSize = 10\n\n    setNextFillColor(layer, color.r, color.g, color.b, alpha)\n    setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\n    addText(layer, smallFont, text, x - boxSize - 5, y)\n\n    setNextFillColor(layer, color.r, color.g, color.b, alpha)\n    setNextStrokeColor(layer, 0, 0, 0, 0)\n    addBox(layer, x - boxSize, y - (boxSize / 2), boxSize, boxSize)\nend\n\nfunction addPriorityInfo()\n\n    setNextFillColor(layer, cyanColor.r, cyanColor.g, cyanColor.b, 1)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    addText(layer, smallFont, \"Priority\", rx - 100, 20)\n\n    priority(rx - 20, 35, \"Low\", greyColor, 1)\n    priority(rx - 70, 35, \"Normal\", barColor1, 1)\n    priority(rx - 140, 35, \"High\", orangeColor, 1)\nend\naddPriorityInfo()\n\nrequestAnimationFrame(30)]]\n\n\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"4"}],"methods":[],"events":[]}
